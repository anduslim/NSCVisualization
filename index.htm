<!DOCTYPE HTML>
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
		<title>Live Sensor Readings Plot</title>

		<script type="text/javascript" src="./js/jquery.min.js"></script>
		<script type="text/javascript" src="./js/jquery.transit.min.js"></script>

		<style type="text/css">
			/* Reset */
			html, body, body div, span, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, abbr, address, cite, code, del, dfn, em, img, ins, kbd, q, samp, small, strong, sub, sup, var, b, i, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, figure, footer, header, menu, nav, section, time, mark, audio, video, details, summary {
				margin: 0;
				padding: 0;
				border: 0;
				font-size: 100%;
				font-weight: normal;
				vertical-align: baseline;
				background: transparent;
			}

		html, body {
			height: 100%;
		}
		
/*
http://desandro.github.io/3dtransforms/docs/cube.html
*/

		#container {
			float: left;
			width: 50%;
			height: 100%;
		}

		#renderarea {
			width: 50%;
			height: 100%;
			position: relative;
			perspective: 1000px;
  			float: right;
  			background: #FFF;
		}

		#cube {
			width: 200px;
			height: 200px;
			transform-style: preserve-3d;
			position: absolute;
			left: 33%;
			top: 33%;
		}

		#cube figure {
			width: 200px;
			height: 200px;
			display: block;
			position: absolute;
			border: 1px solid black;

			font-size: 132pt;
			text-align: center;
		}

		#cube .front  { transform: rotateY(   0deg ) translateZ( 100px ); background: rgba(147,223,184, 0.8) }
		#cube .back   { transform: rotateX( 180deg ) translateZ( 100px ); background: rgba(255,200,186, 0.8) }
		#cube .right  { transform: rotateY(  90deg ) translateZ( 100px ); background: rgba(227,170,214, 0.8) }
		#cube .left   { transform: rotateY( -90deg ) translateZ( 100px ); background: rgba(181,216,235, 0.8) }
		#cube .top    { transform: rotateX(  90deg ) translateZ( 100px ); background: rgba(255,189,216, 0.8) }
		#cube .bottom { transform: rotateX( -90deg ) translateZ( 100px ); background: rgba(255,252,221, 0.8) }

		/* Branding */
		#branding {
			position: absolute;
			right: 10px;
			top: 10px;
			z-index: 1000;
		}

		#branding img {
			height: 60px;
		}
		
		</style>

		<script type="text/javascript">
			
			// EDIT THIS:
			var nodeIds = [101, 102, 103];
			var nodeNames = ["NSC1", "NSC2", "NSC3"];


			var chart;
			var lastTimeStamp = 0;
			var dataLen = 100;

			function constructWebsocket() {
			    var ws = new WebSocket("ws://" + window.location.hostname + ":18823/");
			    ws.onopen = function() {
			        
			    };

			    // Log errors
			    ws.onerror = function(error) {
			        ws.close();
			        console.log("Error, retrying...");
			        constructWebsocket(); // Reopen connection
			    };

			    ws.onclose = function(error) {
			        console.log("Closed, retrying...");
			        constructWebsocket(); // Reopen connection
			    };

			    // Log messages from the server
			    ws.onmessage = function(e) {
			        console.log(e.data);
			        var data = e.data.split(",");

			        // Find out which device it belongs to:
			        var idx = nodeIds.indexOf(data[0] * 1);
			        if(idx == -1){
			        	console.log("\tDropping, unrecognized node id (" + data[0].trim() + ").");
			        	return;
			        }

			        // add the point
			        chart.series[idx].addPoint({x: (new Date()).getTime(), y:data[4] * 1}, true, chart.series[idx].data.length > dataLen);

			        var _x = data[1];
					var _y = data[2];
					var _z = data[3];
					magnitude = Math.pow(Math.pow(_x, 2) + Math.pow(_y, 2) + Math.pow(_z, 2), 0.5);
					//console.log(magnitude);
					_az = Math.atan(_y/_x);
					_ay = Math.acos(_z/magnitude);
					//console.log(_ay)
					//console.log(_az)
					if (isNaN(_ay) || isNaN(_az)){
						return;
					}

					$("#cube").transition({rotateY: _ay + 'rad', rotateZ: _az + 'rad'}, 0);
			    }
			}
			
			$(function() {
				$(document).ready(function() {

					$('#cube figure').css({translateX:(($('#renderarea').width() - 200)/ 2)+'px'});


					var cSeries = [];
					for (var i = 0; i < nodeIds.length; ++i){
						cSeries.push({
								name: 'Noise (' + nodeNames[i] + ')',
								data: []
							});
					}

					chart = new Highcharts.Chart({
						credits: {
								enabled: false
						},
						chart: {
							renderTo: 'container',
						},
						title: {
							text: 'Sensor Data',
							x: -20 //center
						},
						subtitle: {
							text: 'Sense & Sense-abilities',
							x: -20
						},
						xAxis: {
							title: {
								text: 'Time',
							},
							type: 'datetime',
						},
						yAxis: {
							title: {
								text: 'Noise Level',
							},
						},
						series: cSeries
					});
					
					
					// Add the WebSocket connection first:
				    if (window.WebSocket) {
				        ws = constructWebsocket();
				    } else {
				        alert("Your Browser does not support the WebSocket API");
				    }
				});
			});
		</script>
		
	</head>
	<body>
		<script src="./js/highcharts.js"></script>
		<script src="./js/modules/exporting.js"></script>

		<div id="container"></div>
		<div id="renderarea">
			<div id="cube">
				<figure class="front">1</figure>
				<figure class="back">2</figure>
				<figure class="right">3</figure>
				<figure class="left">4</figure>
				<figure class="top">5</figure>
				<figure class="bottom">6</figure>
			</div>
		</div>		
		<div id="branding"><img src="sns-logo.svg" alt="snslogo"/></div>
	</body>
</html>
